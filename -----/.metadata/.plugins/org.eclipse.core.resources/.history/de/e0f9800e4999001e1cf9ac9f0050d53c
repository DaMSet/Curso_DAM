package lamdas;

import java.util.Arrays;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToIntFunction;
import java.util.function.UnaryOperator;

public class lamda {

	public static void main(String[] args) {
		
		// Ejemplo de un arreglo de números enteros
        int[] numeros = {1, 2, 3, 4, 5};

        // Calcular el promedio de un arreglo de números enteros
        double promedio = ((Function<int[], Double>) arr -> {
            if (arr.length == 0) {
                return 0.0;
            }
            return Arrays.stream(arr).average().orElse(0);
        }).apply(numeros);

        System.out.println("Promedio: " + promedio);

        // Calcular el factorial dado un número entero
        long factorial = ((Function<Integer, Long>) n -> {
            if (n == 0 || n == 1) {
                return 1L;
            }
            return n * factorial.apply(n - 1);
        }).apply(5);

        System.out.println("Factorial: " + factorial);

        // Verificar si un número es par
        Predicate<Integer> esPar = num -> num % 2 == 0;

        System.out.println("Es par: " + esPar.test(6));

        // Encontrar el número mayor en un arreglo
        ToIntFunction<int[]> mayorEnArreglo = arr -> Arrays.stream(arr).max().orElse(0);

        System.out.println("Número mayor: " + mayorEnArreglo.applyAsInt(numeros));

        // Encontrar el número menor en un arreglo
        ToIntFunction<int[]> menorEnArreglo = arr -> Arrays.stream(arr).min().orElse(0);

        System.out.println("Número menor: " + menorEnArreglo.applyAsInt(numeros));

        // Encontrar el número que más se repite en un arreglo
        Function<int[], Integer> masRepetido = arr -> Arrays.stream(arr).boxed()
                .collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(), java.util.stream.Collectors.counting()))
                .entrySet().stream().max(java.util.Map.Entry.comparingByValue()).map(java.util.Map.Entry::getKey).orElse(0);

        System.out.println("Número que más se repite: " + masRepetido.apply(numeros));

        // Encontrar el número mayor entre tres números
        BiFunction<Integer, Integer, Integer> mayorEntreTres = (a, b) -> Math.max(a, b);

        System.out.println("Número mayor entre tres: " + mayorEntreTres.apply(8, 15));

        // Multiplicar un String por un número entero
        BiFunction<String, Integer, String> multiplicarStringNumero = (string, num) -> {
            StringBuilder resultado = new StringBuilder();
            for (int i = 0; i < num; i++) {
                resultado.append(string);
            }
            return resultado.toString();
        };

        System.out.println("Resultado de multiplicar: " + multiplicarStringNumero.apply("Hola", 3));
  
        
        
        
	}

}
